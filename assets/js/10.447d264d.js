(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{285:function(s,n,a){"use strict";a.r(n);var t=a(28),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"设计模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式"}},[s._v("#")]),s._v(" 设计模式")]),s._v(" "),a("p",[s._v("设计模式代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。")]),s._v(" "),a("p",[s._v("设计模式是一套被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结。使用设计模式是为了重用代码、让代码更容易被他人理解、保证代码可靠性。 毫无疑问，设计模式于己于他人于系统都是多赢的，设计模式使代码编制真正工程化，设计模式是软件工程的基石，如同大厦的一块块砖石一样。")]),s._v(" "),a("h3",{attrs:{id:"设计模式原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式原则"}},[s._v("#")]),s._v(" 设计模式原则")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("S – Single Responsibility Principle 单一职责原则")]),s._v(" "),a("ul",[a("li",[s._v("一个程序只做好一件事")]),s._v(" "),a("li",[s._v("如果功能过于复杂就拆分开，每个部分保持独立")])])]),s._v(" "),a("li",[a("strong",[s._v("O – OpenClosed Principle 开放/封闭原则")]),s._v(" "),a("ul",[a("li",[s._v("对扩展开放，对修改封闭")]),s._v(" "),a("li",[s._v("增加需求时，扩展新代码，而非修改已有代码")])])]),s._v(" "),a("li",[s._v("L – Liskov Substitution Principle 里氏替换原则\n"),a("ul",[a("li",[s._v("子类能覆盖父类")]),s._v(" "),a("li",[s._v("父类能出现的地方子类就能出现")])])]),s._v(" "),a("li",[s._v("I – Interface Segregation Principle 接口隔离原则\n"),a("ul",[a("li",[s._v("保持接口的单一独立")]),s._v(" "),a("li",[s._v("类似单一职责原则，这里更关注接口")])])]),s._v(" "),a("li",[s._v("D – Dependency Inversion Principle 依赖倒转原则\n"),a("ul",[a("li",[s._v("面向接口编程，依赖于抽象而不依赖于具体")]),s._v(" "),a("li",[s._v("使用方只关注接口而不关注具体类的实现")])])])]),s._v(" "),a("h5",{attrs:{id:"so体现较多，举个栗子：（比如promise）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#so体现较多，举个栗子：（比如promise）"}},[s._v("#")]),s._v(" SO体现较多，举个栗子：（比如Promise）")]),s._v(" "),a("ul",[a("li",[s._v("单一职责原则：每个then中的逻辑只做好一件事")]),s._v(" "),a("li",[s._v("开放封闭原则（对扩展开放，对修改封闭）：如果新增需求，扩展then")])]),s._v(" "),a("h5",{attrs:{id:"再举个栗子：-此例来源-守候-改善代码的各方面问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#再举个栗子：-此例来源-守候-改善代码的各方面问题"}},[s._v("#")]),s._v(" 再举个栗子：(此例来源-"),a("a",{attrs:{href:"https://juejin.im/post/5adc8e18518825672b0352a8#comment",target:"_blank",rel:"noopener noreferrer"}},[s._v("守候-改善代码的各方面问题"),a("OutboundLink")],1),s._v(")")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//checkType('165226226326','mobile')\n//result：false\nlet checkType=function(str, type) {\n    switch (type) {\n        case 'email':\n            return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str)\n        case 'mobile':\n            return /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        case 'tel':\n            return /^(0\\d{2,3}-\\d{7,8})(-\\d{1,4})?$/.test(str);\n        default:\n            return true;\n    }\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("有以下两个问题：")]),s._v(" "),a("ul",[a("li",[s._v("如果想添加其他规则就得在函数里面增加 case 。添加一个规则就修改一次！这样违反了开放-封闭原则（对扩展开放，对修改关闭）。而且这样也会导致整个 API 变得臃肿，难维护。")]),s._v(" "),a("li",[s._v("比如A页面需要添加一个金额的校验，B页面需要一个日期的校验，但是金额的校验只在A页面需要，日期的校验只在B页面需要。如果一直添加 case 。就是导致A页面把只在B页面需要的校验规则也添加进去，造成不必要的开销。B页面也同理。")])]),s._v(" "),a("p",[s._v("建议的方式是给这个 API 增加一个扩展的接口:")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let checkType=(function(){\n    let rules={\n        email(str){\n            return /^[\\w-]+(\\.[\\w-]+)*@[\\w-]+(\\.[\\w-]+)+$/.test(str);\n        },\n        mobile(str){\n            return /^1[3|4|5|7|8][0-9]{9}$/.test(str);\n        }\n    };\n    //暴露接口\n    return {\n        //校验\n        check(str, type){\n            return rules[type]?rules[type](str):false;\n        },\n        //添加规则\n        addRule(type,fn){\n            rules[type]=fn;\n        }\n    }\n})();\n\n//调用方式\n//使用mobile校验规则\nconsole.log(checkType.check('188170239','mobile'));\n//添加金额校验规则\ncheckType.addRule('money',function (str) {\n    return /^[0-9]+(.[0-9]{2})?$/.test(str)\n});\n//使用金额校验规则\nconsole.log(checkType.check('18.36','money'));\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br")])]),a("p",[s._v("此例更详细内容请查看-> "),a("a",{attrs:{href:"https://juejin.im/post/5adc8e18518825672b0352a8#comment",target:"_blank",rel:"noopener noreferrer"}},[s._v("守候i-重构-改善代码的各方面问题"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"设计模式分类（23种设计模式）"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类（23种设计模式）"}},[s._v("#")]),s._v(" 设计模式分类（23种设计模式）")]),s._v(" "),a("ul",[a("li",[s._v("创建型\n"),a("ul",[a("li",[s._v("单例模式")]),s._v(" "),a("li",[s._v("原型模式")]),s._v(" "),a("li",[s._v("工厂模式")]),s._v(" "),a("li",[s._v("抽象工厂模式")]),s._v(" "),a("li",[s._v("建造者模式")])])]),s._v(" "),a("li",[s._v("结构型\n"),a("ul",[a("li",[s._v("适配器模式")]),s._v(" "),a("li",[s._v("装饰器模式")]),s._v(" "),a("li",[s._v("代理模式")]),s._v(" "),a("li",[s._v("外观模式")]),s._v(" "),a("li",[s._v("桥接模式")]),s._v(" "),a("li",[s._v("组合模式")]),s._v(" "),a("li",[s._v("享元模式")])])]),s._v(" "),a("li",[s._v("行为型\n"),a("ul",[a("li",[s._v("观察者模式")]),s._v(" "),a("li",[s._v("迭代器模式")]),s._v(" "),a("li",[s._v("策略模式")]),s._v(" "),a("li",[s._v("模板方法模式")]),s._v(" "),a("li",[s._v("职责链模式")]),s._v(" "),a("li",[s._v("命令模式")]),s._v(" "),a("li",[s._v("备忘录模式")]),s._v(" "),a("li",[s._v("状态模式")]),s._v(" "),a("li",[s._v("访问者模式")]),s._v(" "),a("li",[s._v("中介者模式")]),s._v(" "),a("li",[s._v("解释器模式")])])])]),s._v(" "),a("h4",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[s._v("#")]),s._v(" 工厂模式")]),s._v(" "),a("p",[s._v("工厂模式定义一个用于创建对象的接口，这个接口由子类决定实例化哪一个类。该模式使一个类的实例化延迟到了子类。而子类可以重写接口方法以便创建的时候指定自己的对象类型。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Product {\n    constructor(name) {\n        this.name = name\n    }\n    init() {\n        console.log('init')\n    }\n    fun() {\n        console.log('fun')\n    }\n}\n\nclass Factory {\n    create(name) {\n        return new Product(name)\n    }\n}\n\n// use\nlet factory = new Factory()\nlet p = factory.create('p1')\np.init()\np.fun()\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h5",{attrs:{id:"适用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[s._v("#")]),s._v(" 适用场景")]),s._v(" "),a("ul",[a("li",[s._v("如果你不想让某个子系统与较大的那个对象之间形成强耦合，而是想运行时从许多子系统中进行挑选的话，那么工厂模式是一个理想的选择")]),s._v(" "),a("li",[s._v("将new操作简单封装，遇到new的时候就应该考虑是否用工厂模式；")]),s._v(" "),a("li",[s._v("需要依赖具体环境创建不同实例，这些实例都有相同的行为,这时候我们可以使用工厂模式，简化实现的过程，同时也可以减少每种对象所需的代码量，有利于消除对象间的耦合，提供更大的灵活性")]),s._v(" "),a("li")]),s._v(" "),a("h5",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("创建对象的过程可能很复杂，但我们只需要关心创建结果。")]),s._v(" "),a("li",[s._v("构造函数和创建者分离, 符合“开闭原则”")]),s._v(" "),a("li",[s._v("一个调用者想创建一个对象，只要知道其名称就可以了。")]),s._v(" "),a("li",[s._v("扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。")])]),s._v(" "),a("h5",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("添加新产品时，需要编写新的具体产品类,一定程度上增加了系统的复杂度")]),s._v(" "),a("li",[s._v("考虑到系统的可扩展性，需要引入抽象层，在客户端代码中均使用抽象层进行定义，增加了系统的抽象性和理解难度")])]),s._v(" "),a("h5",{attrs:{id:"什么时候不用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么时候不用"}},[s._v("#")]),s._v(" 什么时候不用")]),s._v(" "),a("p",[s._v("当被应用到错误的问题类型上时,这一模式会给应用程序引入大量不必要的复杂性.除非为创建对象提供一个接口是我们编写的库或者框架的一个设计上目标,否则我会建议使用明确的构造器,以避免不必要的开销。")]),s._v(" "),a("p",[s._v("由于对象的创建过程被高效的抽象在一个接口后面的事实,这也会给依赖于这个过程可能会有多复杂的单元测试带来问题。")]),s._v(" "),a("h5",{attrs:{id:"例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#例子"}},[s._v("#")]),s._v(" 例子")]),s._v(" "),a("ul",[a("li",[s._v("曾经我们熟悉的JQuery的$()就是一个工厂函数，它根据传入参数的不同创建元素或者去寻找上下文中的元素，创建成相应的jQuery对象")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class jQuery {\n    constructor(selector) {\n        super(selector)\n    }\n    add() {\n        \n    }\n  // 此处省略若干API\n}\n\nwindow.$ = function(selector) {\n    return new jQuery(selector)\n}\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("ul",[a("li",[s._v("vue 的异步组件")])]),s._v(" "),a("p",[s._v("在大型应用中，我们可能需要将应用分割成小一些的代码块，并且只在需要的时候才从服务器加载一个模块。为了简化，Vue 允许你以一个工厂函数的方式定义你的组件，这个工厂函数会异步解析你的组件定义。Vue 只有在这个组件需要被渲染的时候才会触发该工厂函数，且会把结果缓存起来供未来重渲染。例如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Vue.component('async-example', function (resolve, reject) {\n  setTimeout(function () {\n    // 向 `resolve` 回调传递组件定义\n    resolve({\n      template: '<div>I am async!</div>'\n    })\n  }, 1000)\n})\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("hr"),s._v(" "),a("h3",{attrs:{id:"单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单例模式"}},[s._v("#")]),s._v(" 单例模式")]),s._v(" "),a("p",[s._v("一个类只有一个实例，并提供一个访问它的全局访问点。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v(" class LoginForm {\n    constructor() {\n        this.state = 'hide'\n    }\n    show() {\n        if (this.state === 'show') {\n            alert('已经显示')\n            return\n        }\n        this.state = 'show'\n        console.log('登录框显示成功')\n    }\n    hide() {\n        if (this.state === 'hide') {\n            alert('已经隐藏')\n            return\n        }\n        this.state = 'hide'\n        console.log('登录框隐藏成功')\n    }\n }\n LoginForm.getInstance = (function () {\n     let instance\n     return function () {\n        if (!instance) {\n            instance = new LoginForm()\n        }\n        return instance\n     }\n })()\n\n// 这里只能使用静态函数 getInstance ， 不能 new SingleObject()\nlet obj1 = LoginForm.getInstance()\nobj1.show()\n\nlet obj2 = new LoginForm()\nobj2.hide()\n\n// 每次获取的都是一个东西 \nconsole.log(obj1 === obj2)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br")])]),a("h3",{attrs:{id:"优点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-2"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("划分命名空间，减少全局变量")]),s._v(" "),a("li",[s._v("增强模块性，把自己的代码组织在一个全局变量名下，放在单一位置，便于维护")]),s._v(" "),a("li",[s._v("且只会实例化一次。简化了代码的调试和维护")])]),s._v(" "),a("h3",{attrs:{id:"缺点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-2"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("由于单例模式提供的是一种单点访问，所以它有可能导致模块间的强耦合 从而不利于单元测试。无法单独测试一个调用了来自单例的方法的类，而只能把它与那个单例作为一个单元一起测试。")])]),s._v(" "),a("h4",{attrs:{id:"场景例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("定义命名空间和实现分支型方法")]),s._v(" "),a("li",[s._v("登录框")]),s._v(" "),a("li",[s._v("vuex 和 redux中的store")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"适配器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#适配器模式"}},[s._v("#")]),s._v(" 适配器模式")]),s._v(" "),a("p",[s._v("将一个类的接口转化为另外一个接口，以满足用户需求，使类之间接口不兼容问题通过适配器得以解决。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Plug {\n  getName() {\n    return 'iphone充电头';\n  }\n}\n\nclass Target {\n  constructor() {\n    this.plug = new Plug();\n  }\n  getName() {\n    return this.plug.getName() + ' 适配器Type-c充电头';\n  }\n}\n\nlet target = new Target();\ntarget.getName(); // iphone充电头 适配器转Type-c充电头\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("h4",{attrs:{id:"优点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-3"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("可以让任何两个没有关联的类一起运行。")]),s._v(" "),a("li",[s._v("提高了类的复用。")]),s._v(" "),a("li",[s._v("适配对象，适配库，适配数据")])]),s._v(" "),a("h3",{attrs:{id:"缺点-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-3"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("额外对象的创建，非直接调用，存在一定的开销（且不像代理模式在某些功能点上可实现性能优化)")]),s._v(" "),a("li",[s._v("如果没必要使用适配器模式的话，可以考虑重构，如果使用的话，尽量把文档完善")])]),s._v(" "),a("h4",{attrs:{id:"场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("整合第三方SDK")]),s._v(" "),a("li",[s._v("封装旧接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 自己封装的ajax， 使用方式如下\najax({\n    url: '/getData',\n    type: 'Post',\n    dataType: 'json',\n    data: {\n        test: 111\n    }\n}).done(function() {})\n// 因为历史原因，代码中全都是：\n// $.ajax({....})\n\n// 做一层适配器\nvar $ = {\n    ajax: function (options) {\n        return ajax(options)\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("ul",[a("li",[s._v("vue的computed")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<template>\n    <div id=\"example\">\n        <p>Original message: \"{{ message }}\"</p>  \x3c!-- Hello --\x3e\n        <p>Computed reversed message: \"{{ reversedMessage }}\"</p>  \x3c!-- olleH --\x3e\n    </div>\n</template>\n<script type='text/javascript'>\n    export default {\n        name: 'demo',\n        data() {\n            return {\n                message: 'Hello'\n            }\n        },\n        computed: {\n            reversedMessage: function() {\n                return this.message.split('').reverse().join('')\n            }\n        }\n    }\n<\/script>\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h5",{attrs:{id:"原有data-中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原有data-中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式"}},[s._v("#")]),s._v(" 原有data 中的数据不满足当前的要求，通过计算属性的规则来适配成我们需要的格式，对原有数据并没有改变，只改变了原有数据的表现形式")]),s._v(" "),a("h4",{attrs:{id:"不同点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同点"}},[s._v("#")]),s._v(" 不同点")]),s._v(" "),a("p",[s._v("适配器与代理模式相似")]),s._v(" "),a("ul",[a("li",[s._v("适配器模式： 提供一个不同的接口（如不同版本的插头）")]),s._v(" "),a("li",[s._v("代理模式： 提供一模一样的接口")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"装饰者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰者模式"}},[s._v("#")]),s._v(" 装饰者模式")]),s._v(" "),a("ul",[a("li",[s._v("动态地给某个对象添加一些额外的职责，，是一种实现继承的替代方案")]),s._v(" "),a("li",[s._v("在不改变原对象的基础上，通过对其进行包装扩展，使原有对象可以满足用户的更复杂需求，而不会影响从这个类中派生的其他对象")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Cellphone {\n    create() {\n        console.log('生成一个手机')\n    }\n}\nclass Decorator {\n    constructor(cellphone) {\n        this.cellphone = cellphone\n    }\n    create() {\n        this.cellphone.create()\n        this.createShell(cellphone)\n    }\n    createShell() {\n        console.log('生成手机壳')\n    }\n}\n// 测试代码\nlet cellphone = new Cellphone()\ncellphone.create()\n\nconsole.log('------------')\nlet dec = new Decorator(cellphone)\ndec.create()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("h4",{attrs:{id:"场景例子-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-2"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("比如现在有4 种型号的自行车，我们为每种自行车都定义了一个单\n独的类。现在要给每种自行车都装上前灯、尾\n灯和铃铛这3 种配件。如果使用继承的方式来给\n每种自行车创建子类，则需要 4×3 = 12 个子类。\n但是如果把前灯、尾灯、铃铛这些对象动态组\n合到自行车上面，则只需要额外增加3 个类")]),s._v(" "),a("li",[s._v("ES7 Decorator "),a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/decorator",target:"_blank",rel:"noopener noreferrer"}},[s._v("阮一峰"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("core-decorators")])]),s._v(" "),a("h4",{attrs:{id:"优点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-4"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("装饰类和被装饰类都只关心自身的核心业务，实现了解耦。")]),s._v(" "),a("li",[s._v("方便动态的扩展功能，且提供了比继承更多的灵活性。")])]),s._v(" "),a("h4",{attrs:{id:"缺点-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-4"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("多层装饰比较复杂。")]),s._v(" "),a("li",[s._v("常常会引入许多小对象，看起来比较相似，实际功能大相径庭，从而使得我们的应用程序架构变得复杂起来")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"代理模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代理模式"}},[s._v("#")]),s._v(" 代理模式")]),s._v(" "),a("p",[s._v("是为一个对象提供一个代用品或占位符，以便控制对它的访问")]),s._v(" "),a("blockquote",[a("p",[s._v("假设当A 在心情好的时候收到花，小明表白成功的几率有\n60%，而当A 在心情差的时候收到花，小明表白的成功率无限趋近于0。\n小明跟A 刚刚认识两天，还无法辨别A 什么时候心情好。如果不合时宜地把花送给A，花\n被直接扔掉的可能性很大，这束花可是小明吃了7 天泡面换来的。\n但是A 的朋友B 却很了解A，所以小明只管把花交给B，B 会监听A 的心情变化，然后选\n择A 心情好的时候把花转交给A，代码如下：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let Flower = function() {}\nlet xiaoming = {\n  sendFlower: function(target) {\n    let flower = new Flower()\n    target.receiveFlower(flower)\n  }\n}\nlet B = {\n  receiveFlower: function(flower) {\n    A.listenGoodMood(function() {\n      A.receiveFlower(flower)\n    })\n  }\n}\nlet A = {\n  receiveFlower: function(flower) {\n    console.log('收到花'+ flower)\n  },\n  listenGoodMood: function(fn) {\n    setTimeout(function() {\n      fn()\n    }, 1000)\n  }\n}\nxiaoming.sendFlower(B)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h4",{attrs:{id:"场景-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-2"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("HTML元 素事件代理")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<ul id=\"ul\">\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n</ul>\n<script>\n  let ul = document.querySelector('#ul');\n  ul.addEventListener('click', event => {\n    console.log(event.target);\n  });\n<\/script>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("ES6 的 proxy "),a("a",{attrs:{href:"http://es6.ruanyifeng.com/#docs/proxy",target:"_blank",rel:"noopener noreferrer"}},[s._v("阮一峰Proxy"),a("OutboundLink")],1)]),s._v(" "),a("li",[s._v("jQuery.proxy()方法")])]),s._v(" "),a("h4",{attrs:{id:"优点-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-5"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("代理模式能将代理对象与被调用对象分离，降低了系统的耦合度。代理模式在客户端和目标对象之间起到一个中介作用，这样可以起到保护目标对象的作用")]),s._v(" "),a("li",[s._v("代理对象可以扩展目标对象的功能；通过修改代理对象就可以了，符合开闭原则；")])]),s._v(" "),a("h4",{attrs:{id:"缺点-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-5"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("p",[s._v("处理请求速度可能有差别，非直接访问存在开销")]),s._v(" "),a("h4",{attrs:{id:"不同点-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不同点-2"}},[s._v("#")]),s._v(" 不同点")]),s._v(" "),a("p",[s._v("装饰者模式实现上和代理模式类似")]),s._v(" "),a("ul",[a("li",[s._v("装饰者模式：  扩展功能，原有功能不变且可直接使用")]),s._v(" "),a("li",[s._v("代理模式： 显示原有功能，但是经过限制之后的")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"外观模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外观模式"}},[s._v("#")]),s._v(" 外观模式")]),s._v(" "),a("p",[s._v("为子系统的一组接口提供一个一致的界面，定义了一个高层接口，这个接口使子系统更加容易使用")]),s._v(" "),a("ol",[a("li",[s._v("兼容浏览器事件绑定")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let addMyEvent = function (el, ev, fn) {\n    if (el.addEventListener) {\n        el.addEventListener(ev, fn, false)\n    } else if (el.attachEvent) {\n        el.attachEvent('on' + ev, fn)\n    } else {\n        el['on' + ev] = fn\n    }\n}; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("封装接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let myEvent = {\n    // ...\n    stop: e => {\n        e.stopPropagation();\n        e.preventDefault();\n    }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h4",{attrs:{id:"场景-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-3"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("设计初期，应该要有意识地将不同的两个层分离，比如经典的三层结构，在数据访问层和业务逻辑层、业务逻辑层和表示层之间建立外观Facade")]),s._v(" "),a("li",[s._v("在开发阶段，子系统往往因为不断的重构演化而变得越来越复杂，增加外观Facade可以提供一个简单的接口，减少他们之间的依赖。")]),s._v(" "),a("li",[s._v("在维护一个遗留的大型系统时，可能这个系统已经很难维护了，这时候使用外观Facade也是非常合适的，为系系统开发一个外观Facade类，为设计粗糙和高度复杂的遗留代码提供比较清晰的接口，让新系统和Facade对象交互，Facade与遗留代码交互所有的复杂工作。")])]),s._v(" "),a("p",[s._v("参考： 大话设计模式")]),s._v(" "),a("h4",{attrs:{id:"优点-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-6"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("减少系统相互依赖。")]),s._v(" "),a("li",[s._v("提高灵活性。")]),s._v(" "),a("li",[s._v("提高了安全性")])]),s._v(" "),a("h4",{attrs:{id:"缺点-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-6"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。")])]),s._v(" "),a("hr"),s._v(" "),a("h4",{attrs:{id:"观察者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[s._v("#")]),s._v(" 观察者模式")]),s._v(" "),a("p",[s._v("定义了一种一对多的关系，让多个观察者对象同时监听某一个主题对象，这个主题对象的状态发生变化时就会通知所有的观察者对象，使它们能够自动更新自己，当一个对象的改变需要同时改变其它对象，并且它不知道具体有多少对象需要改变的时候，就应该考虑使用观察者模式。")]),s._v(" "),a("ul",[a("li",[s._v("发布 & 订阅")]),s._v(" "),a("li",[s._v("一对多")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 主题 保存状态，状态变化之后触发所有观察者对象\nclass Subject {\n  constructor() {\n    this.state = 0\n    this.observers = []\n  }\n  getState() {\n    return this.state\n  }\n  setState(state) {\n    this.state = state\n    this.notifyAllObservers()\n  }\n  notifyAllObservers() {\n    this.observers.forEach(observer => {\n      observer.update()\n    })\n  }\n  attach(observer) {\n    this.observers.push(observer)\n  }\n}\n\n// 观察者\nclass Observer {\n  constructor(name, subject) {\n    this.name = name\n    this.subject = subject\n    this.subject.attach(this)\n  }\n  update() {\n    console.log(`${this.name} update, state: ${this.subject.getState()}`)\n  }\n}\n\n// 测试\nlet s = new Subject()\nlet o1 = new Observer('o1', s)\nlet o2 = new Observer('02', s)\n\ns.setState(12)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br")])]),a("h4",{attrs:{id:"场景-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-4"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("DOM事件")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("document.body.addEventListener('click', function() {\n    console.log('hello world!');\n});\ndocument.body.click()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("vue 响应式")])]),s._v(" "),a("h4",{attrs:{id:"优点-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-7"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("支持简单的广播通信，自动通知所有已经订阅过的对象")]),s._v(" "),a("li",[s._v("目标对象与观察者之间的抽象耦合关系能单独扩展以及重用")]),s._v(" "),a("li",[s._v("增加了灵活性")]),s._v(" "),a("li",[s._v("观察者模式所做的工作就是在解耦，让耦合的双方都依赖于抽象，而不是依赖于具体。从而使得各自的变化都不会影响到另一边的变化。")])]),s._v(" "),a("h4",{attrs:{id:"缺点-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-7"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("p",[s._v("过度使用会导致对象与对象之间的联系弱化，会导致程序难以跟踪维护和理解")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"状态模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#状态模式"}},[s._v("#")]),s._v(" 状态模式")]),s._v(" "),a("p",[s._v("允许一个对象在其内部状态改变的时候改变它的行为，对象看起来似乎修改了它的类")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 状态 （弱光、强光、关灯）\nclass State {\n    constructor(state) {\n        this.state = state\n    }\n    handle(context) {\n        console.log(`this is ${this.state} light`)\n        context.setState(this)\n    }\n}\nclass Context {\n    constructor() {\n        this.state = null\n    }\n    getState() {\n        return this.state\n    }\n    setState(state) {\n        this.state = state\n    }\n}\n// test \nlet context = new Context()\nlet weak = new State('weak')\nlet strong = new State('strong')\nlet off = new State('off')\n\n// 弱光\nweak.handle(context)\nconsole.log(context.getState())\n\n// 强光\nstrong.handle(context)\nconsole.log(context.getState())\n\n// 关闭\nstrong.handle(context)\nconsole.log(context.getState())\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br")])]),a("h4",{attrs:{id:"场景-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-5"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("一个对象的行为取决于它的状态，并且它必须在运行时刻根据状态改变它的行为")]),s._v(" "),a("li",[s._v("一个操作中含有大量的分支语句，而且这些分支语句依赖于该对象的状态")])]),s._v(" "),a("h4",{attrs:{id:"优点-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-8"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("定义了状态与行为之间的关系，封装在一个类里，更直观清晰，增改方便")]),s._v(" "),a("li",[s._v("状态与状态间，行为与行为间彼此独立互不干扰")]),s._v(" "),a("li",[s._v("用对象代替字符串来记录当前状态，使得状态的切换更加一目了然")]),s._v(" "),a("li")]),s._v(" "),a("h4",{attrs:{id:"缺点-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-8"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("会在系统中定义许多状态类")]),s._v(" "),a("li",[s._v("逻辑分散")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"迭代器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代器模式"}},[s._v("#")]),s._v(" 迭代器模式")]),s._v(" "),a("p",[s._v("提供一种方法顺序一个聚合对象中各个元素，而又不暴露该对象的内部表示。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Iterator {\n    constructor(conatiner) {\n        this.list = conatiner.list\n        this.index = 0\n    }\n    next() {\n        if (this.hasNext()) {\n            return this.list[this.index++]\n        }\n        return null\n    }\n    hasNext() {\n        if (this.index >= this.list.length) {\n            return false\n        }\n        return true\n    }\n}\n\nclass Container {\n    constructor(list) {\n        this.list = list\n    }\n    getIterator() {\n        return new Iterator(this)\n    }\n}\n\n// 测试代码\nlet container = new Container([1, 2, 3, 4, 5])\nlet iterator = container.getIterator()\nwhile(iterator.hasNext()) {\n  console.log(iterator.next())\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("h4",{attrs:{id:"场景例子-3"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-3"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("Array.prototype.forEach")]),s._v(" "),a("li",[s._v("jQuery中的$.each()")]),s._v(" "),a("li",[s._v("ES6 Iterator")])]),s._v(" "),a("h4",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点"}},[s._v("#")]),s._v(" 特点")]),s._v(" "),a("ul",[a("li",[s._v("访问一个聚合对象的内容而无需暴露它的内部表示。")]),s._v(" "),a("li",[s._v("为遍历不同的集合结构提供一个统一的接口，从而支持同样的算法在不同的集合结构上进行操作")])]),s._v(" "),a("h4",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("对于集合内部结果常常变化各异，不想暴露其内部结构的话，但又想让客户代码透明的访问其中的元素，可以使用迭代器模式")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"桥接模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#桥接模式"}},[s._v("#")]),s._v(" 桥接模式")]),s._v(" "),a("p",[s._v("桥接模式（Bridge）将抽象部分与它的实现部分分离，使它们都可以独立地变化。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Color {\n    constructor(name){\n        this.name = name\n    }\n}\nclass Shape {\n    constructor(name,color){\n        this.name = name\n        this.color = color \n    }\n    draw(){\n        console.log(`${this.color.name} ${this.name}`)\n    }\n}\n\n//测试\nlet red = new Color('red')\nlet yellow = new Color('yellow')\nlet circle = new Shape('circle', red)\ncircle.draw()\nlet triangle = new Shape('triangle', yellow)\ntriangle.draw()\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h4",{attrs:{id:"优点-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-9"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("有助于独立地管理各组成部分， 把抽象化与实现化解耦")]),s._v(" "),a("li",[s._v("提高可扩充性")])]),s._v(" "),a("h4",{attrs:{id:"缺点-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-9"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("大量的类将导致开发成本的增加，同时在性能方面可能也会有所减少。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"组合模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合模式"}},[s._v("#")]),s._v(" 组合模式")]),s._v(" "),a("ul",[a("li",[s._v("将对象组合成树形结构，以表示“整体-部分”的层次结构。")]),s._v(" "),a("li",[s._v("通过对象的多态表现，使得用户对单个对象和组合对象的使用具有一致性。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class TrainOrder {\n\tcreate () {\n\t\tconsole.log('创建火车票订单')\n\t}\n}\nclass HotelOrder {\n\tcreate () {\n\t\tconsole.log('创建酒店订单')\n\t}\n}\n\nclass TotalOrder {\n\tconstructor () {\n\t\tthis.orderList = []\n\t}\n\taddOrder (order) {\n\t\tthis.orderList.push(order)\n\t\treturn this\n\t}\n\tcreate () {\n\t\tthis.orderList.forEach(item => {\n\t\t\titem.create()\n\t\t})\n\t\treturn this\n\t}\n}\n// 可以在购票网站买车票同时也订房间\nlet train = new TrainOrder()\nlet hotel = new HotelOrder()\nlet total = new TotalOrder()\ntotal.addOrder(train).addOrder(hotel).create()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br")])]),a("h4",{attrs:{id:"场景-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景-6"}},[s._v("#")]),s._v(" 场景")]),s._v(" "),a("ul",[a("li",[s._v("表示对象-整体层次结构")]),s._v(" "),a("li",[s._v("希望用户忽略组合对象和单个对象的不同，用户将统一地使用组合结构中的所有对象（方法）")])]),s._v(" "),a("h4",{attrs:{id:"缺点-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-10"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("p",[s._v("如果通过组合模式创建了太多的对象，那么这些对象可能会让系统负担不起。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[s._v("#")]),s._v(" 原型模式")]),s._v(" "),a("p",[s._v("原型模式（prototype）是指用原型实例指向创建对象的种类，并且通过拷贝这些原型创建新的对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Person {\n  constructor(name) {\n    this.name = name\n  }\n  getName() {\n    return this.name\n  }\n}\nclass Student extends Person {\n  constructor(name) {\n    super(name)\n  }\n  sayHello() {\n    console.log(`Hello， My name is ${this.name}`)\n  }\n}\n\nlet student = new Student("xiaoming")\nstudent.sayHello()\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("原型模式，就是创建一个共享的原型，通过拷贝这个原型来创建新的类，用于创建重复的对象，带来性能上的提升。")]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"策略模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#策略模式"}},[s._v("#")]),s._v(" 策略模式")]),s._v(" "),a("p",[s._v("定义一系列的算法，把它们一个个封装起来，并且使它们可以互相替换")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<html>\n<head>\n    <title>策略模式-校验表单</title>\n    <meta content=\"text/html; charset=utf-8\" http-equiv=\"Content-Type\">\n</head>\n<body>\n    <form id = \"registerForm\" method=\"post\" action=\"http://xxxx.com/api/register\">\n        用户名：<input type=\"text\" name=\"userName\">\n        密码：<input type=\"text\" name=\"password\">\n        手机号码：<input type=\"text\" name=\"phoneNumber\">\n        <button type=\"submit\">提交</button>\n    </form>\n    <script type=\"text/javascript\">\n        // 策略对象\n        const strategies = {\n          isNoEmpty: function (value, errorMsg) {\n            if (value === '') {\n              return errorMsg;\n            }\n          },\n          isNoSpace: function (value, errorMsg) {\n            if (value.trim() === '') {\n              return errorMsg;\n            }\n          },\n          minLength: function (value, length, errorMsg) {\n            if (value.trim().length < length) {\n              return errorMsg;\n            }\n          },\n          maxLength: function (value, length, errorMsg) {\n            if (value.length > length) {\n              return errorMsg;\n            }\n          },\n          isMobile: function (value, errorMsg) {\n            if (!/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|17[7]|18[0|1|2|3|5|6|7|8|9])\\d{8}$/.test(value)) {\n              return errorMsg;\n            }                \n          }\n        }\n        \n        // 验证类\n        class Validator {\n          constructor() {\n            this.cache = []\n          }\n          add(dom, rules) {\n            for(let i = 0, rule; rule = rules[i++];) {\n              let strategyAry = rule.strategy.split(':')\n              let errorMsg = rule.errorMsg\n              this.cache.push(() => {\n                let strategy = strategyAry.shift()\n                strategyAry.unshift(dom.value)\n                strategyAry.push(errorMsg)\n                return strategies[strategy].apply(dom, strategyAry)\n              })\n            }\n          }\n          start() {\n            for(let i = 0, validatorFunc; validatorFunc = this.cache[i++];) {\n              let errorMsg = validatorFunc()\n              if (errorMsg) {\n                return errorMsg\n              }\n            }\n          }\n        }\n\n        // 调用代码\n        let registerForm = document.getElementById('registerForm')\n\n        let validataFunc = function() {\n          let validator = new Validator()\n          validator.add(registerForm.userName, [{\n            strategy: 'isNoEmpty',\n            errorMsg: '用户名不可为空'\n          }, {\n            strategy: 'isNoSpace',\n            errorMsg: '不允许以空白字符命名'\n          }, {\n            strategy: 'minLength:2',\n            errorMsg: '用户名长度不能小于2位'\n          }])\n          validator.add(registerForm.password, [ {\n            strategy: 'minLength:6',\n            errorMsg: '密码长度不能小于6位'\n          }])\n          validator.add(registerForm.phoneNumber, [{\n            strategy: 'isMobile',\n            errorMsg: '请输入正确的手机号码格式'\n          }])\n          return validator.start()\n        }\n\n        registerForm.onsubmit = function() {\n          let errorMsg = validataFunc()\n          if (errorMsg) {\n            alert(errorMsg)\n            return false\n          }\n        }\n    <\/script>\n</body>\n</html>\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br"),a("span",{staticClass:"line-number"},[s._v("62")]),a("br"),a("span",{staticClass:"line-number"},[s._v("63")]),a("br"),a("span",{staticClass:"line-number"},[s._v("64")]),a("br"),a("span",{staticClass:"line-number"},[s._v("65")]),a("br"),a("span",{staticClass:"line-number"},[s._v("66")]),a("br"),a("span",{staticClass:"line-number"},[s._v("67")]),a("br"),a("span",{staticClass:"line-number"},[s._v("68")]),a("br"),a("span",{staticClass:"line-number"},[s._v("69")]),a("br"),a("span",{staticClass:"line-number"},[s._v("70")]),a("br"),a("span",{staticClass:"line-number"},[s._v("71")]),a("br"),a("span",{staticClass:"line-number"},[s._v("72")]),a("br"),a("span",{staticClass:"line-number"},[s._v("73")]),a("br"),a("span",{staticClass:"line-number"},[s._v("74")]),a("br"),a("span",{staticClass:"line-number"},[s._v("75")]),a("br"),a("span",{staticClass:"line-number"},[s._v("76")]),a("br"),a("span",{staticClass:"line-number"},[s._v("77")]),a("br"),a("span",{staticClass:"line-number"},[s._v("78")]),a("br"),a("span",{staticClass:"line-number"},[s._v("79")]),a("br"),a("span",{staticClass:"line-number"},[s._v("80")]),a("br"),a("span",{staticClass:"line-number"},[s._v("81")]),a("br"),a("span",{staticClass:"line-number"},[s._v("82")]),a("br"),a("span",{staticClass:"line-number"},[s._v("83")]),a("br"),a("span",{staticClass:"line-number"},[s._v("84")]),a("br"),a("span",{staticClass:"line-number"},[s._v("85")]),a("br"),a("span",{staticClass:"line-number"},[s._v("86")]),a("br"),a("span",{staticClass:"line-number"},[s._v("87")]),a("br"),a("span",{staticClass:"line-number"},[s._v("88")]),a("br"),a("span",{staticClass:"line-number"},[s._v("89")]),a("br"),a("span",{staticClass:"line-number"},[s._v("90")]),a("br"),a("span",{staticClass:"line-number"},[s._v("91")]),a("br"),a("span",{staticClass:"line-number"},[s._v("92")]),a("br"),a("span",{staticClass:"line-number"},[s._v("93")]),a("br"),a("span",{staticClass:"line-number"},[s._v("94")]),a("br"),a("span",{staticClass:"line-number"},[s._v("95")]),a("br"),a("span",{staticClass:"line-number"},[s._v("96")]),a("br"),a("span",{staticClass:"line-number"},[s._v("97")]),a("br"),a("span",{staticClass:"line-number"},[s._v("98")]),a("br"),a("span",{staticClass:"line-number"},[s._v("99")]),a("br"),a("span",{staticClass:"line-number"},[s._v("100")]),a("br"),a("span",{staticClass:"line-number"},[s._v("101")]),a("br"),a("span",{staticClass:"line-number"},[s._v("102")]),a("br"),a("span",{staticClass:"line-number"},[s._v("103")]),a("br"),a("span",{staticClass:"line-number"},[s._v("104")]),a("br"),a("span",{staticClass:"line-number"},[s._v("105")]),a("br")])]),a("h4",{attrs:{id:"场景例子-4"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-4"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("如果在一个系统里面有许多类，它们之间的区别仅在于它们的'行为'，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。")]),s._v(" "),a("li",[s._v("一个系统需要动态地在几种算法中选择一种。")]),s._v(" "),a("li",[s._v("表单验证")])]),s._v(" "),a("h4",{attrs:{id:"优点-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-10"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("利用组合、委托、多态等技术和思想，可以有效的避免多重条件选择语句")]),s._v(" "),a("li",[s._v("提供了对开放-封闭原则的完美支持，将算法封装在独立的strategy中，使得它们易于切换，理解，易于扩展")]),s._v(" "),a("li",[s._v("利用组合和委托来让Context拥有执行算法的能力，这也是继承的一种更轻便的代替方案")])]),s._v(" "),a("h4",{attrs:{id:"缺点-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-11"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("会在程序中增加许多策略类或者策略对象")]),s._v(" "),a("li",[s._v("要使用策略模式，必须了解所有的strategy，必须了解各个strategy之间的不同点，这样才能选择一个合适的strategy")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"享元模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#享元模式"}},[s._v("#")]),s._v(" 享元模式")]),s._v(" "),a("p",[s._v("运用共享技术有效地支持大量细粒度对象的复用。系统只使用少量的对象，而这些对象都很相似，状态变化很小，可以实现对象的多次复用。由于享元模式要求能够共享的对象必须是细粒度对象，因此它又称为轻量级模式，它是一种对象结构型模式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let examCarNum = 0         // 驾考车总数\n/* 驾考车对象 */\nclass ExamCar {\n    constructor(carType) {\n        examCarNum++\n        this.carId = examCarNum\n        this.carType = carType ? '手动档' : '自动档'\n        this.usingState = false    // 是否正在使用\n    }\n\n    /* 在本车上考试 */\n    examine(candidateId) {\n        return new Promise((resolve => {\n            this.usingState = true\n            console.log(`考生- ${ candidateId } 开始在${ this.carType }驾考车- ${ this.carId } 上考试`)\n            setTimeout(() => {\n                this.usingState = false\n                console.log(`%c考生- ${ candidateId } 在${ this.carType }驾考车- ${ this.carId } 上考试完毕`, 'color:#f40')\n                resolve()                       // 0~2秒后考试完毕\n            }, Math.random() * 2000)\n        }))\n    }\n}\n\n/* 手动档汽车对象池 */\nManualExamCarPool = {\n    _pool: [],                  // 驾考车对象池\n    _candidateQueue: [],        // 考生队列\n\n    /* 注册考生 ID 列表 */\n    registCandidates(candidateList) {\n        candidateList.forEach(candidateId => this.registCandidate(candidateId))\n    },\n\n    /* 注册手动档考生 */\n    registCandidate(candidateId) {\n        const examCar = this.getManualExamCar()    // 找一个未被占用的手动档驾考车\n        if (examCar) {\n            examCar.examine(candidateId)           // 开始考试，考完了让队列中的下一个考生开始考试\n              .then(() => {\n                  const nextCandidateId = this._candidateQueue.length && this._candidateQueue.shift()\n                  nextCandidateId && this.registCandidate(nextCandidateId)\n              })\n        } else this._candidateQueue.push(candidateId)\n    },\n\n    /* 注册手动档车 */\n    initManualExamCar(manualExamCarNum) {\n        for (let i = 1; i <= manualExamCarNum; i++) {\n            this._pool.push(new ExamCar(true))\n        }\n    },\n\n    /* 获取状态为未被占用的手动档车 */\n    getManualExamCar() {\n        return this._pool.find(car => !car.usingState)\n    }\n}\n\nManualExamCarPool.initManualExamCar(3)          // 一共有3个驾考车\nManualExamCarPool.registCandidates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])  // 10个考生来考试\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br"),a("span",{staticClass:"line-number"},[s._v("59")]),a("br"),a("span",{staticClass:"line-number"},[s._v("60")]),a("br"),a("span",{staticClass:"line-number"},[s._v("61")]),a("br")])]),a("h4",{attrs:{id:"场景例子-5"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-5"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("文件上传需要创建多个文件实例的时候")]),s._v(" "),a("li",[s._v("如果一个应用程序使用了大量的对象，而这些大量的对象造成了很大的存储开销时就应该考虑使用享元模式")])]),s._v(" "),a("h4",{attrs:{id:"优点-11"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-11"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("大大减少对象的创建，降低系统的内存，使效率提高。")])]),s._v(" "),a("h4",{attrs:{id:"缺点-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-12"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，\n不应该随着内部状态的变化而变化，否则会造成系统的混乱")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"模板方法模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[s._v("#")]),s._v(" 模板方法模式")]),s._v(" "),a("p",[s._v("模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法和封装子类中所有方法的执行顺序。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Beverage {\n    constructor({brewDrink, addCondiment}) {\n        this.brewDrink = brewDrink\n        this.addCondiment = addCondiment\n    }\n    /* 烧开水，共用方法 */\n    boilWater() { console.log('水已经煮沸=== 共用') }\n    /* 倒杯子里，共用方法 */\n    pourCup() { console.log('倒进杯子里===共用') }\n    /* 模板方法 */\n    init() {\n        this.boilWater()\n        this.brewDrink()\n        this.pourCup()\n        this.addCondiment()\n    }\n}\n/* 咖啡 */\nconst coffee = new Beverage({\n     /* 冲泡咖啡，覆盖抽象方法 */\n     brewDrink: function() { console.log('冲泡咖啡') },\n     /* 加调味品，覆盖抽象方法 */\n     addCondiment: function() { console.log('加点奶和糖') }\n})\ncoffee.init() \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("h4",{attrs:{id:"场景例子-6"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-6"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现")]),s._v(" "),a("li",[s._v("子类中公共的行为应被提取出来并集中到一个公共父类中的避免代码重复")])]),s._v(" "),a("h4",{attrs:{id:"优点-12"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-12"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("提取了公共代码部分，易于维护")])]),s._v(" "),a("h4",{attrs:{id:"缺点-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-13"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("增加了系统复杂度，主要是增加了的抽象类和类间联系")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"职责链模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#职责链模式"}},[s._v("#")]),s._v(" 职责链模式")]),s._v(" "),a("p",[s._v("使多个对象都有机会处理请求，从而避免请求的发送者和接受者之间的耦合关系，将这些对象连成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 请假审批，需要组长审批、经理审批、总监审批\nclass Action {\n    constructor(name) {\n        this.name = name\n        this.nextAction = null\n    }\n    setNextAction(action) {\n        this.nextAction = action\n    }\n    handle() {\n        console.log( `${this.name} 审批`)\n        if (this.nextAction != null) {\n            this.nextAction.handle()\n        }\n    }\n}\n\nlet a1 = new Action("组长")\nlet a2 = new Action("经理")\nlet a3 = new Action("总监")\na1.setNextAction(a2)\na2.setNextAction(a3)\na1.handle()\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("h4",{attrs:{id:"场景例子-7"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-7"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("JS 中的事件冒泡")]),s._v(" "),a("li",[s._v("作用域链")]),s._v(" "),a("li",[s._v("原型链")])]),s._v(" "),a("h4",{attrs:{id:"优点-13"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-13"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("降低耦合度。它将请求的发送者和接收者解耦。")]),s._v(" "),a("li",[s._v("简化了对象。使得对象不需要知道链的结构")]),s._v(" "),a("li",[s._v("增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任")]),s._v(" "),a("li",[s._v("增加新的请求处理类很方便。")])]),s._v(" "),a("h4",{attrs:{id:"缺点-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-14"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("不能保证某个请求一定会被链中的节点处理，这种情况可以在链尾增加一个保底的接受者节点来处理这种即将离开链尾的请求。")]),s._v(" "),a("li",[s._v("使程序中多了很多节点对象，可能再一次请求的过程中，大部分的节点并没有起到实质性的作用。他们的作用仅仅是让请求传递下去，从性能当面考虑，要避免过长的职责链到来的性能损耗。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"命令模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令模式"}},[s._v("#")]),s._v(" 命令模式")]),s._v(" "),a("p",[s._v("将一个请求封装成一个对象，从而让你使用不同的请求把客户端参数化，对请求排队或者记录请求日志，可以提供命令的撤销和恢复功能。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 接收者类\nclass Receiver {\n    execute() {\n      console.log('接收者执行请求')\n    }\n  }\n  \n// 命令者\nclass Command {  \n    constructor(receiver) {\n        this.receiver = receiver\n    }\n    execute () {    \n        console.log('命令');\n        this.receiver.execute()\n    }\n}\n// 触发者\nclass Invoker {   \n    constructor(command) {\n        this.command = command\n    }\n    invoke() {   \n        console.log('开始')\n        this.command.execute()\n    }\n}\n  \n// 仓库\nconst warehouse = new Receiver();   \n// 订单    \nconst order = new Command(warehouse);  \n// 客户\nconst client = new Invoker(order);      \nclient.invoke()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("h4",{attrs:{id:"优点-14"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-14"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("对命令进行封装，使命令易于扩展和修改")]),s._v(" "),a("li",[s._v("命令发出者和接受者解耦，使发出者不需要知道命令的具体执行过程即可执行")])]),s._v(" "),a("h4",{attrs:{id:"缺点-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-15"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("使用命令模式可能会导致某些系统有过多的具体命令类。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"备忘录模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#备忘录模式"}},[s._v("#")]),s._v(" 备忘录模式")]),s._v(" "),a("p",[s._v("在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到保存的状态。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//备忘类\nclass Memento{\n    constructor(content){\n        this.content = content\n    }\n    getContent(){\n        return this.content\n    }\n}\n// 备忘列表\nclass CareTaker {\n    constructor(){\n        this.list = []\n    }\n    add(memento){\n        this.list.push(memento)\n    }\n    get(index){\n        return this.list[index]\n    }\n}\n// 编辑器\nclass Editor {\n    constructor(){\n        this.content = null\n    }\n    setContent(content){\n        this.content = content\n    }\n    getContent(){\n     return this.content\n    }\n    saveContentToMemento(){\n        return new Memento(this.content)\n    }\n    getContentFromMemento(memento){\n        this.content = memento.getContent()\n    }\n}\n\n//测试代码\n\nlet editor = new Editor()\nlet careTaker = new CareTaker()\n\neditor.setContent('111')\neditor.setContent('222')\ncareTaker.add(editor.saveContentToMemento())\neditor.setContent('333')\ncareTaker.add(editor.saveContentToMemento())\neditor.setContent('444')\n\nconsole.log(editor.getContent()) //444\neditor.getContentFromMemento(careTaker.get(1))\nconsole.log(editor.getContent()) //333\n\neditor.getContentFromMemento(careTaker.get(0))\nconsole.log(editor.getContent()) //222\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br")])]),a("h4",{attrs:{id:"场景例子-8"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-8"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("分页控件")]),s._v(" "),a("li",[s._v("撤销组件")])]),s._v(" "),a("h4",{attrs:{id:"优点-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-15"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态")])]),s._v(" "),a("h4",{attrs:{id:"缺点-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-16"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"中介者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#中介者模式"}},[s._v("#")]),s._v(" 中介者模式")]),s._v(" "),a("p",[s._v("解除对象与对象之间的紧耦合关系。增加一个中介者对象后，所有的 相关对象都通过中介者对象来通信，而不是互相引用，所以当一个对象发生改变时，只需要通知 中介者对象即可。中介者使各对象之间耦合松散，而且可以独立地改变它们之间的交互。中介者\n模式使网状的多对多关系变成了相对简单的一对多关系（类似于观察者模式，但是单向的，由中介者统一管理。）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class A {\n    constructor() {\n        this.number = 0\n    }\n    setNumber(num, m) {\n        this.number = num\n        if (m) {\n            m.setB()\n        }\n    }\n}\nclass B {\n    constructor() {\n        this.number = 0\n    }\n    setNumber(num, m) {\n        this.number = num\n        if (m) {\n            m.setA()\n        }\n    }\n}\nclass Mediator {\n    constructor(a, b) {\n        this.a = a\n        this.b = b\n    }\n    setA() {\n        let number = this.b.number\n        this.a.setNumber(number * 10)\n    }\n    setB() {\n        let number = this.a.number\n        this.b.setNumber(number / 10)\n    }\n}\n\nlet a = new A()\nlet b = new B()\nlet m = new Mediator(a, b)\na.setNumber(10, m)\nconsole.log(a.number, b.number)\nb.setNumber(10, m)\nconsole.log(a.number, b.number)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br")])]),a("h4",{attrs:{id:"场景例子-9"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-9"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象")]),s._v(" "),a("li",[s._v("想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。")]),s._v(" "),a("li",[s._v("博彩，彩民们赢了钱从博彩公司拿，输了钱交给博彩公司")])]),s._v(" "),a("h4",{attrs:{id:"优点-16"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-16"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("使各对象之间耦合松散，而且可以独立地改变它们之间的交互")]),s._v(" "),a("li",[s._v("中介者和对象一对多的关系取代了对象之间的网状多对多的关系")]),s._v(" "),a("li",[s._v("如果对象之间的复杂耦合度导致维护很困难，而且耦合度随项目变化增速很快，就需要中介者重构代码")])]),s._v(" "),a("h4",{attrs:{id:"缺点-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-17"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("系统中会新增一个中介者对象，因 为对象之间交互的复杂性，转移成了中介者对象的复杂性，使得中介者对象经常是巨大的。中介 者对象自身往往就是一个难以维护的对象。")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"解释器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[s._v("#")]),s._v(" 解释器模式")]),s._v(" "),a("p",[s._v("给定一个语言, 定义它的文法的一种表示，并定义一个解释器, 该解释器使用该表示来解释语言中的句子。")]),s._v(" "),a("p",[s._v("此例来自"),a("a",{attrs:{href:"https://xin-tan.com/passages/2019-01-25-interpreter-pattern/#_3-%E5%A4%9A%E8%AF%AD%E8%A8%80%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[s._v("心谭博客"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Context {\n    constructor() {\n      this._list = []; // 存放 终结符表达式\n      this._sum = 0; // 存放 非终结符表达式(运算结果)\n    }\n  \n    get sum() {\n      return this._sum;\n    }\n    set sum(newValue) {\n      this._sum = newValue;\n    }\n    add(expression) {\n      this._list.push(expression);\n    }\n    get list() {\n      return [...this._list];\n    }\n  }\n  \n  class PlusExpression {\n    interpret(context) {\n      if (!(context instanceof Context)) {\n        throw new Error("TypeError");\n      }\n      context.sum = ++context.sum;\n    }\n  }\n  class MinusExpression {\n    interpret(context) {\n      if (!(context instanceof Context)) {\n        throw new Error("TypeError");\n      }\n      context.sum = --context.sum;\n    }\n  }\n  \n  /** 以下是测试代码 **/\n  const context = new Context();\n  \n  // 依次添加: 加法 | 加法 | 减法 表达式\n  context.add(new PlusExpression());\n  context.add(new PlusExpression());\n  context.add(new MinusExpression());\n  \n  // 依次执行: 加法 | 加法 | 减法 表达式\n  context.list.forEach(expression => expression.interpret(context));\n  console.log(context.sum);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br")])]),a("h4",{attrs:{id:"优点-17"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-17"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("易于改变和扩展文法。")]),s._v(" "),a("li",[s._v("由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法")])]),s._v(" "),a("h4",{attrs:{id:"缺点-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-18"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("执行效率较低，在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度慢")]),s._v(" "),a("li",[s._v("对于复杂的文法比较难维护")])]),s._v(" "),a("hr"),s._v(" "),a("h3",{attrs:{id:"访问者模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[s._v("#")]),s._v(" 访问者模式")]),s._v(" "),a("p",[s._v("表示一个作用于某对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作。")]),s._v(" "),a("h4",{attrs:{id:"场景例子-10"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#场景例子-10"}},[s._v("#")]),s._v(" 场景例子")]),s._v(" "),a("ul",[a("li",[s._v("对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作")]),s._v(" "),a("li",[s._v('需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作"污染"这些对象的类，也不希望在增加新操作时修改这些类。')])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 访问者  \nclass Visitor {\n    constructor() {}\n    visitConcreteElement(ConcreteElement) {\n        ConcreteElement.operation()\n    }\n}\n// 元素类  \nclass ConcreteElement{\n    constructor() {\n    }\n    operation() {\n       console.log("ConcreteElement.operation invoked");  \n    }\n    accept(visitor) {\n        visitor.visitConcreteElement(this)\n    }\n}\n// client\nlet visitor = new Visitor()\nlet element = new ConcreteElement()\nelementA.accept(visitor)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h4",{attrs:{id:"优点-18"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点-18"}},[s._v("#")]),s._v(" 优点")]),s._v(" "),a("ul",[a("li",[s._v("符合单一职责原则")]),s._v(" "),a("li",[s._v("优秀的扩展性")]),s._v(" "),a("li",[s._v("灵活性")])]),s._v(" "),a("h4",{attrs:{id:"缺点-19"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点-19"}},[s._v("#")]),s._v(" 缺点")]),s._v(" "),a("ul",[a("li",[s._v("具体元素对访问者公布细节，违反了迪米特原则")]),s._v(" "),a("li",[s._v("违反了依赖倒置原则，依赖了具体类，没有依赖抽象。")]),s._v(" "),a("li",[s._v("具体元素变更比较困难")])]),s._v(" "),a("hr"),s._v(" "),a("h5",{attrs:{id:"兄台，如果对你有所帮助，请点个赞也是给予我的支持"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兄台，如果对你有所帮助，请点个赞也是给予我的支持"}},[s._v("#")]),s._v(" 兄台，如果对你有所帮助，请点个赞也是给予我的支持")]),s._v(" "),a("h3",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[s._v("#")]),s._v(" 参考资料")]),s._v(" "),a("ul",[a("li",[a("RouterLink",{attrs:{to:"ttps://coding.imooc.com/class/255.html"}},[s._v("双越-Javascript设计模式系统讲解与应用")])],1),s._v(" "),a("li",[a("a",{attrs:{href:"https://book.douban.com/subject/26382780/",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript设计模式与开发实践"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/TomXu/tag/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",target:"_blank",rel:"noopener noreferrer"}},[s._v("汤姆大叔的设计模式"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.yuque.com/wubinhp/uxiv5i/ozc2c5",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://www.yuque.com/wubinhp/uxiv5i/pvqh1b"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);